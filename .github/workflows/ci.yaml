name: Tests

on: [push, pull_request]

jobs:
  check:
    name: Checks
    runs-on: ubuntu-latest
    steps:

      - name: Install desktop dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libgtk-3-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check
        run: cargo check --tests --workspace --benches

  test:
    name: Tests
    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # matrix:
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      # Clean unnecessary files to save disk space
      - name: clean unnecessary files to save space
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
          sudo apt -y autoremove --purge
          sudo apt -y autoclean
          sudo apt clean
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df -h          

          # remove large packages manually (all but llvm)
          sudo apt-get remove -y '^aspnetcore-.*' || echo "::warning::The command [sudo apt-get remove -y '^aspnetcore-.*'] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y '^dotnet-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^dotnet-.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y 'php.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y 'php.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y '^mongodb-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mongodb-.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y '^mysql-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mysql-.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing || echo "::warning::The command [sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y google-cloud-sdk --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-sdk --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y google-cloud-cli --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-cli --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get autoremove -y || echo "::warning::The command [sudo apt-get autoremove -y] failed to complete successfully. Proceeding..."
          sudo apt-get clean || echo "::warning::The command [sudo apt-get clean] failed to complete successfully. Proceeding..."
          df -h          

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # This might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: false

          # large packages, except llvm, are removed manually during the previous step
          # see: https://github.com/jlumbroso/free-disk-space/issues/6
          # TODO: use the discussed whitelist feature when available
          large-packages: false

          swap-storage: true

      - name: Install desktop dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libgtk-3-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo build
        run: cargo build --bin wala-wagdx --release --workspace --all --tests --benches

      - name: Run cargo test regular features
        run: cargo nextest run --release --workspace

      - name: Run cargo doc tests
        run: cargo test --doc --release --workspace

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:

      - name: Install desktop dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libgtk-3-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --tests --benches -- -D warnings

  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, windows-latest, macos-latest ]
    name: Building, ${{ matrix.os }}
    steps:

      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Install apt prerequisites
        if: ${{ runner.os == 'Linux' }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libglib2.0-dev libatk1.0-dev libgtk-3-dev
          version: 1.0

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Environment
        shell: bash
        run: echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Add Rust target for Windows MSVC with Static CRT
        if: runner.os == 'Windows'
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Build on Windows with Static CRT Linkage (MSVC)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir wala-wagdx-${{ env.SHORT_SHA }}-windows-x86_64-static || true
          cargo build --bin wala-wagdx --release --target x86_64-pc-windows-msvc
          cp target/x86_64-pc-windows-msvc/release/wala-wagdx.exe wala-wagdx-${{ env.SHORT_SHA }}-windows-x86_64-static/wala-wagdx.exe
          
          archive="wala-wagdx-${{ env.SHORT_SHA }}-windows-x86_64-static.zip"
          powershell "Compress-Archive wala-wagdx-${{ env.SHORT_SHA }}-windows-x86_64-static/* \"${archive}\""

      - name: Upload Static CRT build to GitHub
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: wala-wagdx-${{ env.SHORT_SHA }}-win32-x86_64-static.zip
          path: wala-wagdx-${{ env.SHORT_SHA }}-win32-x86_64-static.zip

      - name: Set up Python
        if: runner.os == 'macOS'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Add Rust target for macOS x86 and aarch64'
        if: runner.os == 'macOS'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Build on MacOS
        if: runner.os == 'macOS'
        run: |
          mkdir wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64 || true
          cargo build --bin wala-wagdx --release --target aarch64-apple-darwin

          sudo chmod +x target/aarch64-apple-darwin/release/wala-wagdx wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64/wala-wagdx
          cp target/aarch64-apple-darwin/release/wala-wagdx wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64/wala-wagdx
          archive="wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64/wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64.zip"
          zip -r "${archive}" ./wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64/*

      - name: Upload MacOS build to GitHub 
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with: 
          name: wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64.zip
          path: wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64/wala-wagdx-${{ env.SHORT_SHA }}-macos-arm64.zip

      - name: Build on MacOS x86
        if: runner.os == 'macOS'
        run: |
          mkdir wala-wagdx-${{ env.SHORT_SHA }}-macos-x86 || true
          cargo build --bin wala-wagdx --release --target x86_64-apple-darwin

          sudo chmod +x target/x86_64-apple-darwin/release/wala-wagdx wala-wagdx-${{ env.SHORT_SHA }}-macos-x86/wala-wagdx
          cp target/x86_64-apple-darwin/release/wala-wagdx wala-wagdx-${{ env.SHORT_SHA }}-macos-x86/wala-wagdx
          archive="wala-wagdx-${{ env.SHORT_SHA }}-macos-x86/wala-wagdx-${{ env.SHORT_SHA }}-macos-x86.zip"
          zip -r "${archive}" ./wala-wagdx-${{ env.SHORT_SHA }}-macos-x86/*

      - name: Upload MacOS x86 build to GitHub
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with: 
          name: wala-wagdx-${{ env.SHORT_SHA }}-macos-x86.zip
          path: wala-wagdx-${{ env.SHORT_SHA }}-macos-x86/wala-wagdx-${{ env.SHORT_SHA }}-macos-x86.zip

      - name: Install Dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev pkg-config

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          mkdir wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64 || true
          cargo build --bin wala-wagdx --release
          mkdir -p .debpkg/usr/bin
          
          sudo chmod +x target/release/wala-wagdx
          cp target/release/wala-wagdx .debpkg/usr/bin/
          cp target/release/wala-wagdx wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64/wala-wagdx
          archive="wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64/wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64.zip"
          zip -r "${archive}" ./wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64/*

      - name: Upload Linux build to GitHub 
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with: 
          name: wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64.zip
          path: wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64/wala-wagdx-${{ env.SHORT_SHA }}-linux-gnu-amd64.zip

      - name: Package Debian Release
        if: runner.os == 'Linux'
        id: package_debian
        uses: jiro4989/build-deb-action@v3
        with:
          package: wala-wagdx
          package_root: .debpkg
          maintainer: Tritonn204
          version: "refs/tags/v0.0.1" # refs/tags/v*.*.*
          arch: 'amd64'
          depends: 'libglib2.0-0, libatk1.0-0, libgtk-3-0'
          desc: 'Kaspa NG desktop p2p node and wallet'
      - name: Install and Test Debian Package
        if: runner.os == 'Linux'
        run: |
          sudo dpkg -i "${{ steps.package_debian.outputs.file_name }}"
          wala-wagdx --version || echo "Failed to execute wala-wagdx --version"
      # - name: Package Details
      #   if: runner.os == 'Linux'
      #   run: |
      #     ls -la
      #     dpkg-deb -I ${{ steps.package_debian.outputs.file_name }}
      #     dpkg-deb -c ${{ steps.package_debian.outputs.file_name }}
